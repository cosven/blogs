---
layout: post
title: "<代码整洁之道> - 读书笔记"
date: 2017-03-14 16:42:23 +00:00
permalink: /blogs/20
tags: [代码整洁之道, 读书笔记, notes]
categories: [稍微正经点的]
---
读这本书的目的：能说出好代码和坏代码之间的差异

感觉这本书写的有厉害...完全不想边做笔记边看...

## 第一章 - 整洁代码 (DONE)

### 为什么要有整洁代码

为啥我们需要整洁代码呢？代码不会消失；糟糕的代码会让公司倒闭的。   
有趣的一个点：`勒布朗法则：稍后等于永不`... 哈哈   
还有个 `破窗理论`，恩恩，看起来也不错...    
混乱的代码有代价的：生产力会逐渐下降；不能恶性循环；想快就要保持代码整洁。

### 什么是整洁的代码

1. 整洁的代码只做好一件事情
2. 看起来让人很愉悦
3. 有测试
4. 小块代码
5. 字面编程
6. 在意代码：别人如果想改你的代码，最终会回到原点... (惊呆
7. 没有重复代码

## 第二章 命名 (DONE)

1. 使用可以搜索的名称（不要太短）
2. 名副其实 - 明确的命名 - 发现好的就换掉旧的
3. 使用读得出来的名称
1. 避免思维映射，不应当让读者在脑中把你的名称翻译成他们熟悉的名称
2. 方法名应该是动词
3. 别用双关语。 add vs append
4. 使用解决领域的名称

## 第六章 - 对象与数据结构 (DONE)

### 关于测试这东西，感觉书上有几个点说的挺在理...：

测试代码的质量应该 >= 生产代码的质量。维护测试和维护代码一样，都需要成本，试想，如果测试代码写得一塌糊涂...那之后修改起来势必耗时耗力，测试看不懂，那测试的作用也大大减小了
一个测试只测一个概念
也就是说，平常有童鞋抱怨维护测试成本大，写测试不方便：有可能是测试代码没写好？2333

### 迪米特法则

类C的方法f只应该调用一下对象的方法：

- C
- 由f创建的对象
- 作为参数传递给f的对象
- 由C的实体变量持有的对象
- 方法不应调用由任何函数返回的对象的方法。