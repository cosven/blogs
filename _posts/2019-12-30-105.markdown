---
layout: post
title: "Golang 最佳实践 - 学习记录"
date: 2019-12-30 05:09:08 +00:00
permalink: /blogs/105
tags: [golang, 最佳实践]
categories: [稍微正经点的]
---
### logging
出发点：我知道 go 标准库的 log 有些不足，不过 TiDB 的 log 代码又有些复杂，暂时没有时间细看，想了解下 golang logging 的最佳实践。

[GO Logger 日志实践](https://www.imhanjm.com/2017/05/19/go%20logger%20%E6%97%A5%E5%BF%97%E5%AE%9E%E8%B7%B5/)
这篇文章讲了标准 log 的一些问题：没有 level 等，不过标准库都是在用 log 这个模块。
文章也提到了 zap 和 logrus 这两个常见的库，zap 性能优于 logrus，但 logrus 使用起来更加方便。作者还说，大公司都会定制自己的 log。

另外一个问题：TiDB 里面为什么既用了 logrus，也用了 zap？
git blame 看一下 `logutil/log.go` 这个文件，发现这样一个 PR: [*: start replacing logger with zap logger ](https://github.com/pingcap/tidb/pull/9279)

### constants
疑问：
- [x] constant 是否需要给定类型？
  - 不需要，从[这篇博客](https://blog.golang.org/constants)可以看出
- [x] 实践中，constant 和枚举的关系和区别？
  - 没看到相关资料，不过 golang 的枚举常常会使用 iota 来完成
- [x] constant 命名是否要加入 namespace？命名是否全部大写？
  - 命名推荐[驼峰命名](https://stackoverflow.com/a/22688926/4302892)
  - namespace 没有相关资料提到，可能要从更上层来解决命名问题

### struct 方法是否需要先判断实例是否为 nil？

struct 的方法有两种定义方式，一种是用 Pointer，一种是用 Value。

这里有个[说法](https://dev.to/chen/gos-method-receiver-pointer-vs-value-1kl8) ，说是共享值就用 pointer，否则用 value。

[effective_go](https://golang.org/doc/effective_go.html#pointers_vs_values)里面只说了：用指针的话，可以改变自己。

### golang defer/panic/recover
背景：一个 web 程序如果出现意外错误，程序应该是可以返回 500 的，这样就不需要处理每个错误了？那 golang 中怎样实现这个逻辑呢？

参考文章：https://blog.golang.org/defer-panic-and-recover

文章讲 defer/panic/recover 也是 flow control 的一种，可以理解每个 goroutine 都有一个调用栈，defer 语句在每个函数结束的时候都会调用。可以想象在栈上，caller 函数下一层就是 defer，defer 之间有先进后出的特点。recover 操作需要放在 defer 里面。

### golang 方法名大小写如何抉择？
根据官方资料：要 export 给另外一个包的必须大写（语法级别的限制）。
而我自己遇到的问题是：我有一个 web 应用，里面很多逻辑本身就不需要 export，这时候，我就全部用小写吗？目前查资料的结论是的。

### golang 错误/异常 定义与处理
参考文章：https://dave.cheney.net/2016/04/27/dont-just-check-errors-handle-them-gracefully